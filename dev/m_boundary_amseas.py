# ###########################################################################
#
# File    : m_boundary_amseas.py
#
# Author  : Fernando MendonÃ§a (CIMA UAlg)
#
# Created : 2023-03-01
#
# Updated : 2025-09-04
#
# Descrp. : Coordinates the data processing from NOMADS NCOM AMSEAS.
#           (https://nomads.ncep.noaa.gov/pub/data/nccf/com/ncom/prod/)
#
# ###########################################################################

from datetime import date, datetime
from glob import glob
from os import makedirs, path, unlink
from subprocess import run
from typing import Tuple

import requests


def webrqst(url: str, fout: str) -> int:
    """Downloads from a URL to an output file defined in 'fout'.
    WARNING: Does not check if the path to 'fout' exists.
    
    STDOUT:
    - Status code: 0 for completed and 1 for error.

    Keyword arguments:
    - url: download URL;
    - fout: name and path of the output file.
    """

    # Download file:
    print("Downloading...", url)
    resp = requests.get(url)
    size = resp.headers.get("Content-Length")
    status = resp.status_code

    # Download success code = 200:
    if status != 200 or size == '0': return 1

    with open(fout, "wb") as dat:
        dat.write(resp.content)
        
    # File size should be the same of the header:
    return 1 if str(path.getsize(fout)) != size else 0


def getamseas(outdir: str, opdate: date) -> Tuple[str, int]:
    """Downloads a single .tgz file from the AMSEAS server.
    The archive contents are extracted to a daily folder,
    in 'YYMMDD' format, within 'outdir'.
    
    STDOUT:
    - String with the path to the folder where the netCDF files
    are extracted. Returns an empty string when there's an error;
    - Status code: 0 for completed and 1 for error.
    
    Keyword arguments:
    - outdir: the directory path where the download will be saved;
    - opdate: download process date.
    """

    # Check output directory:
    if not path.isdir(outdir):
        print("[ERROR] m_boundary_amseas.getamseas: NotADirectoryError")
        print(f"\tOutput directory '{outdir}' not found.")
        return "", 1
    
    # Build donwload URL:
    url = "https://nomads.ncep.noaa.gov/pub/data/nccf/com/ncom/prod/ncom."
    dt = (opdate - date.today()).days

    if dt > 3:
        print("[ERROR] m_boundary_amseas.getamseas: IndexError")
        print(f"\tAMSEAS is not yet available for {opdate.isoformat()}.")
        return "", 1
    elif dt > 0:
        url += date.today().strftime("%Y%m%d/amseas_u_ocn_ncout_grid1_")
        url += date.today().strftime("%Y%m%d00_t")
        url += f"{dt*24+1:04d}-{(dt+1)*24:04d}.tgz"
    else:
        url += opdate.strftime("%Y%m%d/amseas_u_ocn_ncout_grid1_")
        url += opdate.strftime("%Y%m%d00_t0000-0024.tgz")

    # AMSEAS maintains 7 days of data, however, it is not always a sequence
    # from D-6 to D+0. When there's an error, the server might skip days,
    # e.g.: D-8, D-6, D-5, D-4, D-2, D-1, D+0. For this reason, there is no
    # "if" clause to test "dt < 6".
    
    # Download from URL and extract netCDFs:
    dout = path.join(outdir, opdate.strftime("%y%m%d"))
    fout = dout + ".tgz"
    makedirs(dout, exist_ok=True)
    
    if webrqst(url, fout) > 0:
        print("[ERROR] m_boundary_amseas.getamseas: RuntimeError")
        print(f"\tAMSEAS download failed.")
        return "", 1
    
    cmd = "tar -xzvf \"" + fout + "\" -C \"" + dout + "\""

    if run(cmd, shell=True).returncode > 0:
        print("[ERROR] m_boundary_amseas.getamseas: RuntimeError")
        print(f"\tFailed to extract {fout}.")
        return "", 1
    
    unlink(fout)
    return dout, 0


def rmamseas(iptdir: str) -> None:
    """The first AMSEAS forecast day always contains data from D+0 at 00:00
    to D+1 at 00:00. Therefore, when donwloading on day D+1, the data from
    D+1 at 00:00 would be repeated. Thus, this function cleans up old files,
    keeping only data from D+0 at 00:00 to D+0 at 21:00 (AMSEAS has a 3-hour
    step time) in a single daily folder. The daily folders are generated by
    the process performed in 'getamseas'.

    Keyword argument:
    - iptdir: path to the directory containing the daily folders,
    in 'YYMMDD' format.
    """

    for daydir in glob(path.join(iptdir, "*")):
        # Skip files and unformatted directories:
        if path.isfile(daydir): continue

        try:
            day = datetime.strptime(path.basename(daydir), "%y%m%d").date()
        except ValueError:
            continue

        # Skip forecast data:
        if day >= date.today(): continue

        # AMSEAS provides one file each 3 hours, so a daily foder should
        # contain 8 files. Remove any other file bigger than D+0 at 21:00:
        ncs = sorted(glob(path.join(daydir, "*.nc")))

        while len(ncs) > 8:
            ntc = ncs.pop(-1)
            print("Removing...", ntc)
            unlink(ntc)


if __name__ == "__main__":
    from datetime import timedelta

    outdir = r"C:\Users\ferna\Downloads\amseas"
    
    fin = date.today()
    ini = fin-timedelta(6)

    while ini <= fin:
        getamseas(outdir, ini)
        ini += timedelta(1)

    rmamseas(outdir)
    # WARNING: rmamseas won't clean the last folder (TODAY)!